[{"title":"Spin Contrib HTTP","author":"Thorsten Hans","content":"This is a library created by Thorsten Hans which contains helpers to build HTTP-based applications with Fermyon Spin.","keywords":"http helpers, rust","langauge":"Rust","tags":["http","rust"],"url":"/hub/preview/library_spin_contrib_http","id":"library_spin_contrib_http"},{"title":"Spin js2wasm","author":"fermyon","content":"This is an SDK for building Spin apps using JavaScript (and TypeScript). It installs by default with the undefined.spin plugins install js2wasmThis guide walks you through how to use it: [HTTP Components](https://developer.fermyon.com/spin/javascript-components","keywords":"plugins, packaging plugins, javascript, typescript","langauge":"JS/TS","tags":["sdk","javascript"],"url":"/hub/preview/plugin_js2wasm","id":"plugin_js2wasm"},{"title":"Spin py2wasm","author":"fermyon","content":"This is an SDK for building Spin apps using Python. It installs by default with the undefined.spin plugins install py2wasmThis guide walks you through how to use it: [HTTP Components](https://developer.fermyon.com/spin/python-components","keywords":"web app, sdk, python, api","langauge":"Python","tags":["plugins","python","sdk"],"url":"/hub/preview/plugin_py2wasm","id":"plugin_py2wasm"},{"title":"Spin Message Trigger","author":"Lee-Orr ","content":"A generiuc messaging trigger for undefined. Note this is an experimental/work-in-progress repo, and is not production ready at this point. Also - if you have suggestions for improvements, feel free to make them in the Issues tab.undefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedTo install the plugin, run the following command on the system running your spin deployment (or any development machine):spin plugin install --url https://github.com/lee-orr/spin-message-trigger/releases/download/canary/trigger-message.json --yesOnce you've installed the plugin, you can get started quickly installing the templates and using them:spin templates install --git https://github.com/lee-orr/spin-message-trigger --upgradeYou can then set up a new project using:spin new message-appOnce you have that, you can use spin add to set up components, brokers and gateways. Importantly undefined once they are created.\nThe available templates are:\n| Template Name | Description |\n| --- | --- |\n| message-component | This creates a component that gets triggered by a subscription. |\n| request-response-message-component | This creates a component that gets triggered by a request-response message, with an HTTP method & path. |\n| queue-component | This creates a component that gets subscribes to a queue - meaning only one member of the queue group will get triggered for each message. Most useful if you have multiple instances of the spin application running. |\n|  |  |\n| redis-broker | This connects to a redis pub-sub on the provided server |\n| mqtt-broker |  This connects to an Mqtt server |\n| nats-broker |  This connects to a Nats server or cluster |\n|  |  |\n| broker-gateway | This sets up an Http gateway that publishes to one of the brokers in your project |For detailed usage checkout out the [github repository](https://github.com/lee-orr/spin-message-trigger","langauge":"Rust","tags":["trigger","rust"],"url":"/hub/preview/plugin_spin_message_trigger","id":"plugin_spin_message_trigger"},{"title":"Spin Pluginify","author":"itowlson","content":"This is a Spin plugin that helps with the inner loop of Spin plugin development by creating the tar file and manifest for you.For more detailed instructions, check out the source in [github](https://github.com/itowlson/spin-pluginify","keywords":"plugins, packaging plugins","langauge":"Rust","tags":["plugins","rust"],"url":"/hub/preview/plugin_spin_pluginify","id":"plugin_spin_pluginify"},{"title":"Spinlet","author":"cardoso","content":"Spinlet is a plugin and runtime for building and running wasm32-wasi cli components as  undefined for  undefined. It provides a sandboxed environment with access control to protect the host system from malicious code. Spinlet supports features such as std::env::args and std::fs::read_dir, and allows users to specify which environment variables, directories, and files the plugin has access to.Spinlet requires the following tools to be installed:undefinedundefinedundefinedundefinedundefinedgit clone https://github.com/cardoso/spinlet\ncd spinlet\nspin pluginify -i\nspin let\n``","keywords":"sandbox, runtime, cli components, wasm32-wasi","langauge":"Rust","tags":["rust"],"url":"/hub/preview/plugin_spinlet","id":"plugin_spinlet"},{"title":"SQS Trigger","author":"fermyon","content":"A experimental trigger that can be used to build Spin apps with SQS triggers.spin plugins install --url https://github.com/fermyon/spin-trigger-sqs/releases/download/canary/trigger-sqs.jsonFor more detailed instructions, check out the source in [github](https://github.com/fermyon/spin-trigger-sqs","keywords":"sqs, trigger","langauge":"Rust","tags":["sqs","trigger","rust"],"url":"/hub/preview/plugin_sqs_trigger","id":"plugin_sqs_trigger"},{"title":"Dioxus Web application sample","author":"fermyon","content":"A blog post showing how to build Web pages using Dioxus and Spin.","keywords":"frontend, rust, gui","langauge":"Rust","tags":["rust","html","web"],"url":"/hub/preview/sample_dioxus","id":"sample_dioxus"},{"title":"Building a Like button","author":"fermyon","content":"A blog post showing how to persist data using the Spin key-value store.","langauge":"TypeScript","tags":["typescript","key-value","web"],"url":"/hub/preview/sample_like_button","id":"sample_like_button"},{"title":"OpenAI Chat API TS","author":"teknicus","content":"This is a sample demonstrating to use the undefined with TypeScript.The application exposes an endpoint to ask a question in the body of a POST request and get an answer in the response. Originally created for the undefinedundefinedundefinedundefinedundefinedundefinedundefinedundefinedThis example gets the OpenAI key from a Spin configuration variable. Pass the value of the key to Spin in an environment variable prefixed with SPIN_CONFIG. Spin's environment variable provider with parse the local process environment for these variables and expose them through the Spin config SDK.$ export SPIN_CONFIG_OPENAI_KEY=$YOUR_OPENAI_KEY \n$ spin build --up\nServing http://127.0.0.1:3000\nAvailable Routes:\n  openai-chat-ts: http://127.0.0.1:3000/questionNow ask your question in the body of the request:$ curl -d \"Will I get a pet tortoise?\" http://127.0.0.1:3000/question\n{\"answer\": \"Outlook is uncertain.\"}undefinedundefinedThe HTTP request is handled by the handleRequest function. Following is an overview of the process flow:undefinedundefinedundefinedundefinedundefinedPlease refer to the code for the details of the implementation.undefinedundefinedundefined","keywords":"config, api, AI, chatgpt, ts, http","langauge":"TypeScript","tags":["openai","chatgpt","typescript"],"url":"/hub/preview/sample_openaichat_ts","id":"sample_openaichat_ts"},{"title":"To Do Sample App","author":"rylev","content":"This is a sample app that uses SQLite Storage to store \"todo\" items, and then renders the list using Spin's static file server.","langauge":"Rust","tags":["rust","http","SQLite"],"url":"/hub/preview/sample_todo","id":"sample_todo"},{"title":"Empty HTTP trigger template","author":"fermyon","content":"This template creates an HTTP application with no components. It installs by default with the undefined.Use this template when you expect to undefined multiple components to an application, to help you establish an even directory structure.","keywords":"web app, http, api, starter","tags":["http"],"url":"/hub/preview/template_http_empty","id":"template_http_empty"},{"title":"Go HTTP trigger template","author":"fermyon","content":"This is the default HTTP trigger template for Go. It installs by default with the undefined.This guide walks you through how to use it: [HTTP Components](https://developer.fermyon.com/spin/go-components#http-components","keywords":"web app, http, api","langauge":"Go","tags":["go","http"],"url":"/hub/preview/template_http_go","id":"template_http_go"},{"title":"JavaScript HTTP trigger template","author":"fermyon","content":"This is the default HTTP trigger template for JavaScript. It installs by default with the undefined.This guide walks you through how to use it: [HTTP Components](https://developer.fermyon.com/spin/javascript-components#http-components","keywords":"web app, http, api","langauge":"JS/TS","tags":["javascript","http"],"url":"/hub/preview/template_http_js","id":"template_http_js"},{"title":"Python HTTP trigger template","author":"fermyon","content":"This is the default HTTP trigger template for Python. It installs by default with the undefined.This guide walks you through how to use it: [Structure of a Python Component](https://developer.fermyon.com/spin/python-components#structure-of-a-python-component","keywords":"web app, http, api","langauge":"Python","tags":["python","http"],"url":"/hub/preview/template_http_python","id":"template_http_python"},{"title":"Rust HTTP trigger template","author":"fermyon","content":"This is the default HTTP trigger template for Rust. It installs by default with the undefined.This guide walks you through how to use it: [HTTP Components](https://developer.fermyon.com/spin/rust-components#http-components","keywords":"web app, http, api","langauge":"Rust","tags":["rust","http"],"url":"/hub/preview/template_http_rust","id":"template_http_rust"},{"title":"TypeScript HTTP trigger template","author":"fermyon","content":"This is the default HTTP trigger template for TypeScript. It installs by default with the undefined.This guide walks you through how to use it: [HTTP Components](https://developer.fermyon.com/spin/javascript-components#http-components","keywords":"web app, http, api","langauge":"JS/TS","tags":["typescript","http"],"url":"/hub/preview/template_http_ts","id":"template_http_ts"},{"title":"Key value explorer template","author":"radu-matei","content":"The explorer will use the default store to persist the credentials to access the UI and the API. If no values are set, the first invocation will set a randomly generated pair of username and password under the kv-credentials key, with the value following the user:password format. On the first run, the values will be printed in the logs, and they can be used to log in and change them (creating a new credentials value will override the existing value).undefined\nthe explorer can only be used with Spin's default key/value store. When this will be configurable, this component will support working with custom stores as well.","keywords":"key-value, kv, explorer","langauge":"Go","tags":["go","http","kv"],"url":"/hub/preview/template_kv_explorer","id":"template_kv_explorer"},{"title":"Spin NextJS","author":"radu-matei","content":"This is a template for building and statically exporting your Next.js 13 application and running it on Fermyon Spin.This guide walks you through how to use it: [HTTP Components](https://developer.fermyon.com/spin/javascript-components#http-components","keywords":"react, next.js, js, javascript, typescript","langauge":"JS/TS","tags":["javascript","http"],"url":"/hub/preview/template_nextjs","id":"template_nextjs"},{"title":"Go Redis trigger template","author":"fermyon","content":"This is the default Redis pub-sub trigger template for Go. It installs by default with the undefined.This guide walks you through how to use it: [Redis Components](https://developer.fermyon.com/spin/go-components#redis-components","keywords":"web app, redis","langauge":"Go","tags":["go","redis"],"url":"/hub/preview/template_redis_go","id":"template_redis_go"},{"title":"Rust Redis trigger template","author":"fermyon","content":"This is the default Redis pub-sub trigger template for Rust. It installs by default with the undefined.This guide walks you through how to use it: [Redis Components](https://developer.fermyon.com/spin/rust-components#redis-components","keywords":"web app, redis","langauge":"Rust","tags":["rust","redis"],"url":"/hub/preview/template_redis_rust","id":"template_redis_rust"},{"title":"Static file server template","author":"fermyon","content":"Using the component as part of a Spin application\nLet's have a look at the component definition (from spin.toml):[[component]]\nsource = \"spin_static_fs.wasm\"\nid = \"fileserver\"\nfiles = [{ source = \"\", destination = \"/\" }]\n[component.trigger]\nroute = \"/...\"This component will recursively mount all files from the current directory and will serve them. If an index.html file is in the source root, it will be served if no file is specified.Running the static server:$ spin up --listen 127.0.0.1:3000 --file spin.toml\nAt this point, the component is going to serve all files in the current directory, and this can be tested using curl:\n\n$ curl localhost:3000/LICENSE\n                              Apache License\n                        Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n...undefined\nCurrently, this file server has a single cache header that it can set through the CACHE_CONTROL environment variable. If no value is set, the default max-age=60 is used instead for all media types.undefined\nYou can configure a FALLBACK_PATH environment variable that points to a file that will be returned instead of the default 404 Not Found response. If no environment value is set, the default behavior is to return a 404 Not Found response. This behavior is useful for Single Page Applications that use view routers on the front-end like React and Vue.undefined\n[[component]]\nsource = \"target/wasm32-wasi/release/spin_static_fs.wasm\"\nid = \"fs\"\nfiles = [{ source = \"test\", destination = \"/\" }]\nenvironment = { FALLBACK_PATH = \"index.html\" }","keywords":"static websites, fileserver","langauge":"Rust","tags":["rust","http"],"url":"/hub/preview/template_spin_fileserver","id":"template_spin_fileserver"}]